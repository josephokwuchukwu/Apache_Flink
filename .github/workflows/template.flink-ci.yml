# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Workflow template for triggering the Flink's test suite.

name: "Apache Flink Test Workflow Template"

on:
  workflow_call:
    inputs:
      workflow-caller-id:
        description: "The calling job's ID that can be used for build artifact names (that need to be different between different jobs of the same workflow)."
        default: ""
        type: string
      environment:
        description: "Defines environment variables for downstream scripts."
        required: true
        type: string
      jdk_version:
        description: "The Java version to use."
        default: 8
        type: number
    secrets:
      s3_bucket:
        required: false
      s3_access_key:
        required: false
      s3_secret_key:
        required: false

permissions: read-all

# Running logic within a container comes with challenges around file permissions (e.g. when trying
# to generate the hash for a certain set of files; see https://github.com/actions/cache/issues/753):
#
# The code is cloned into the runner's workspace /home/runner/work/ but outside the container.
# The runner's workspace folder is then mounted to /__w within the container. Files that were generated
# as part of the checkout will have the runner's user as the owner. Any files that are generated during
# the workflow execution will have the container's user as the owner (i.e. root). That can cause issues
# with actions that need to access the files of the checkout.
#
# We can work around this issue by copying the source code to a separate location (i.e. the container
# user's home folder). It's important to notice that any file that is subject to caching should still
# live in the mounted folder to ensure accessibility by the cache action.
env:
  MOUNTED_WORKING_DIR: /__w/flink/flink
  CONTAINER_LOCAL_WORKING_DIR: /root/flink
  # The following two variables are used by the utility scripts for creating
  # and unpacking the build artifacts.
  FLINK_ARTIFACT_DIR: /root/artifact-directory
  FLINK_ARTIFACT_FILENAME: flink_artifacts.tar.gz

  MAVEN_REPO_FOLDER: /root/.m2/repository
  MAVEN_ARGS: -Dmaven.repo.local=/root/.m2/repository
  # required by tools/azure-pipelines/cache_docker_images.sh
  DOCKER_IMAGES_CACHE_FOLDER: /root/.docker-cache

jobs:
  compile:
    name: "Compile"
    runs-on: ubuntu-22.04
    container:
      image: mapohl/flink-ci:FLINK-34194
      # --init makes the process in the container being started as an init process which will clean up any daemon processes during shutdown
      # --privileged allows writing coredumps in docker (FLINK-16973)
      options: --init --privileged
    env:
      # timeout in minutes - this environment variable is required by uploading_watchdog.sh
      GHA_JOB_TIMEOUT: 240
    outputs:
      stringified-workflow-name: ${{ steps.workflow-prep-step.outputs.stringified-workflow-name }}
    steps:
      - name: "Flink Checkout"
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: "Initialize job"
        uses: "./.github/actions/job_init"
        with:
          jdk_version: ${{ inputs.jdk_version }}
          maven_repo_folder: ${{ env.MAVEN_REPO_FOLDER }}
          source_directory: ${{ env.MOUNTED_WORKING_DIR }}
          target_directory: ${{ env.CONTAINER_LOCAL_WORKING_DIR }}

      - name: "Stringify workflow name"
        id: workflow-prep-step
        run: |
          # adds a stringified version of the workflow name that can be used for generating unique build artifact names within a composite workflow
          # - replaces any special characters (except for underscores and dots) with dashes
          # - makes the entire string lowercase
          # - condenses multiple dashes into a single one
          # - removes leading and following dashes
          stringified_workflow_name=$(echo "${{ github.workflow }}-${{ inputs.workflow-caller-id }}" | tr -C '[:alnum:]._' '-' |  tr '[:upper:]' '[:lower:]' | sed -e 's/--*/-/g' -e 's/^-*//g' -e 's/-*$//g')
          echo "stringified-workflow-name=${stringified_workflow_name}" >> $GITHUB_OUTPUT
