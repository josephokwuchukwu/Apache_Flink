# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Build documentation"
on:
  schedule:
    - cron: '0 0 * * *' # Deploy every day
  workflow_dispatch:

jobs:
  extract-release-branches:
    #if: github.repository == 'apache/flink'
    name: "Extracts release branch information"
    runs-on: "ubuntu-latest"
    outputs:
      matrix_config: ${{ steps.matrix_generation_step.outputs.matrix_config }}
    steps:
      - name: "Flink Checkout"
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: "Extracts dev version"
        id: dev_version_extraction_step
        run: |
          master_snapshot_version="$(./mvnw help:evaluate --quiet -Dexpression=project.version -DforceStdout)"
          echo "dev_version=$(echo ${master_snapshot_version} | cut -d'-' -f1)" >> ${GITHUB_OUTPUT}

      - name: "Extracts release branch from checkout"
        id: release_branch_extraction_step
        uses: "./.github/actions/release_branch_extraction"

      - name: "Generates matrix configuration"
        id: matrix_generation_step
        shell: bash
        run: |
          newest_release="${{ steps.release_branch_extraction_step.outputs.newest_release }}"
          penultimate_release="${{ steps.release_branch_extraction_step.outputs.penultimate_release }}"
          antepenultimate_release="${{ steps.release_branch_extraction_step.outputs.antepenultimate_release }}"
          
          # matrix strategy generation
          matrix_config_json='{"include": ['
          
          # master (e.g. 1.20)
          matrix_config_json=${matrix_config_json}'{"branch": "master", "alias": "release-${{ steps.dev_version_extraction_step.outputs.dev_version }}"},'
          
          # most-recent release (e.g. 1.19)
          matrix_config_json=${matrix_config_json}'{"branch": "'${newest_release}'", "alias": "stable"},'
          
          # predecessor of most-recent release (e.g. 1.18)
          matrix_config_json=${matrix_config_json}'{"branch": "'${penultimate_release}'", "alias": ""},'
          
          # release that was deprecated with the most-recent release (e.g. 1.17)
          matrix_config_json=${matrix_config_json}'{"branch": "'${antepenultimate_release}'", "alias": ""}'
          
          matrix_config_json=${matrix_config_json}']}'
          
          echo "matrix_config=${matrix_config_json}" >> ${GITHUB_OUTPUT}

  build-documentation:
    needs: extract-release-branches
    name: "Builds Documentation"
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix: ${{ fromJSON(needs.extract-release-branches.outputs.matrix_config) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}
      - name: "Upload documentation for ${{ matrix.branch }}"
        run: echo ${{ matrix.branch }}
      - name: "Upload documentation for ${{ matrix.branch }} with alias ${{ matrix.alias }}"
        if: matrix.alias != ''
        run: echo ${{ matrix.branch}} with ${{ matrix.alias }}
